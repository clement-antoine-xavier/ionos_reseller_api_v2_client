# coding: utf-8

"""
    Reseller API

    API allowing resellers to create and manage contracts 

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class ResourceLimits(BaseModel):
    """
    ResourceLimits
    """ # noqa: E501
    ram_server_max: StrictInt = Field(description="maximum ram per virtual machine", alias="ramServerMax")
    cpu_server_max: StrictInt = Field(description="maximum number of cpu per virtual machine", alias="cpuServerMax")
    hdd_volume_max_size: StrictInt = Field(description="maximum hdd volume size", alias="hddVolumeMaxSize")
    ssd_volume_max_size: StrictInt = Field(description="maximum ssd volume size", alias="ssdVolumeMaxSize")
    ram_contract_max: StrictInt = Field(description="maximum ram per contract", alias="ramContractMax")
    cpu_contract_max: StrictInt = Field(description="maximum cpu per contract", alias="cpuContractMax")
    hdd_volume_contract_max_size: StrictInt = Field(description="maximum hhd volume per contract", alias="hddVolumeContractMaxSize")
    ssd_volume_contract_max_size: StrictInt = Field(description="maximum ssd volume per contract", alias="ssdVolumeContractMaxSize")
    ips: StrictInt = Field(description="maximum ips per contract")
    __properties: ClassVar[List[str]] = ["ramServerMax", "cpuServerMax", "hddVolumeMaxSize", "ssdVolumeMaxSize", "ramContractMax", "cpuContractMax", "hddVolumeContractMaxSize", "ssdVolumeContractMaxSize", "ips"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResourceLimits from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResourceLimits from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ramServerMax": obj.get("ramServerMax"),
            "cpuServerMax": obj.get("cpuServerMax"),
            "hddVolumeMaxSize": obj.get("hddVolumeMaxSize"),
            "ssdVolumeMaxSize": obj.get("ssdVolumeMaxSize"),
            "ramContractMax": obj.get("ramContractMax"),
            "cpuContractMax": obj.get("cpuContractMax"),
            "hddVolumeContractMaxSize": obj.get("hddVolumeContractMaxSize"),
            "ssdVolumeContractMaxSize": obj.get("ssdVolumeContractMaxSize"),
            "ips": obj.get("ips")
        })
        return _obj


