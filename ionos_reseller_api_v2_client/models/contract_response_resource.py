# coding: utf-8

"""
    Reseller API

    API allowing resellers to create and manage contracts 

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ionos_reseller_api_v2_client.models.resource_limits import ResourceLimits
from typing import Optional, Set
from typing_extensions import Self

class ContractResponseResource(BaseModel):
    """
    ContractResponseResource
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The resource's unique identifier")
    href: Optional[StrictStr] = Field(default=None, description="URI for specific Contract")
    name: Optional[StrictStr] = Field(default=None, description="name of the contract")
    reseller_reference: Optional[StrictStr] = Field(default=None, description="reseller reference of the contract", alias="resellerReference")
    status: Optional[StrictStr] = Field(default=None, description="status of the contract")
    resource_limits: Optional[ResourceLimits] = Field(default=None, alias="resourceLimits")
    __properties: ClassVar[List[str]] = ["id", "href", "name", "resellerReference", "status", "resourceLimits"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContractResponseResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "href",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of resource_limits
        if self.resource_limits:
            _dict['resourceLimits'] = self.resource_limits.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContractResponseResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "href": obj.get("href"),
            "name": obj.get("name"),
            "resellerReference": obj.get("resellerReference"),
            "status": obj.get("status"),
            "resourceLimits": ResourceLimits.from_dict(obj["resourceLimits"]) if obj.get("resourceLimits") is not None else None
        })
        return _obj


